/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Defines a hash value for a fitness event */
@org.apache.avro.specific.AvroGenerated
public class FitnessHash extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3756346741357850981L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FitnessHash\",\"namespace\":\"za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro\",\"doc\":\"Defines a hash value for a fitness event\",\"fields\":[{\"name\":\"userid\",\"type\":\"string\",\"doc\":\"The simulated user who sent the fitness data\"},{\"name\":\"tenant_id\",\"type\":\"int\",\"doc\":\"The simulated tenant id\"},{\"name\":\"MY_FRAUD_KEY\",\"type\":\"string\",\"doc\":\"The hash value generated from a fitness event\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FitnessHash> ENCODER =
      new BinaryMessageEncoder<FitnessHash>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FitnessHash> DECODER =
      new BinaryMessageDecoder<FitnessHash>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FitnessHash> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FitnessHash> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FitnessHash> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FitnessHash>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FitnessHash to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FitnessHash from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FitnessHash instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FitnessHash fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The simulated user who sent the fitness data */
   private java.lang.CharSequence userid;
  /** The simulated tenant id */
   private int tenant_id;
  /** The hash value generated from a fitness event */
   private java.lang.CharSequence MY_FRAUD_KEY;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FitnessHash() {}

  /**
   * All-args constructor.
   * @param userid The simulated user who sent the fitness data
   * @param tenant_id The simulated tenant id
   * @param MY_FRAUD_KEY The hash value generated from a fitness event
   */
  public FitnessHash(java.lang.CharSequence userid, java.lang.Integer tenant_id, java.lang.CharSequence MY_FRAUD_KEY) {
    this.userid = userid;
    this.tenant_id = tenant_id;
    this.MY_FRAUD_KEY = MY_FRAUD_KEY;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userid;
    case 1: return tenant_id;
    case 2: return MY_FRAUD_KEY;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userid = (java.lang.CharSequence)value$; break;
    case 1: tenant_id = (java.lang.Integer)value$; break;
    case 2: MY_FRAUD_KEY = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userid' field.
   * @return The simulated user who sent the fitness data
   */
  public java.lang.CharSequence getUserid() {
    return userid;
  }


  /**
   * Sets the value of the 'userid' field.
   * The simulated user who sent the fitness data
   * @param value the value to set.
   */
  public void setUserid(java.lang.CharSequence value) {
    this.userid = value;
  }

  /**
   * Gets the value of the 'tenant_id' field.
   * @return The simulated tenant id
   */
  public int getTenantId() {
    return tenant_id;
  }


  /**
   * Sets the value of the 'tenant_id' field.
   * The simulated tenant id
   * @param value the value to set.
   */
  public void setTenantId(int value) {
    this.tenant_id = value;
  }

  /**
   * Gets the value of the 'MY_FRAUD_KEY' field.
   * @return The hash value generated from a fitness event
   */
  public java.lang.CharSequence getMYFRAUDKEY() {
    return MY_FRAUD_KEY;
  }


  /**
   * Sets the value of the 'MY_FRAUD_KEY' field.
   * The hash value generated from a fitness event
   * @param value the value to set.
   */
  public void setMYFRAUDKEY(java.lang.CharSequence value) {
    this.MY_FRAUD_KEY = value;
  }

  /**
   * Creates a new FitnessHash RecordBuilder.
   * @return A new FitnessHash RecordBuilder
   */
  public static za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder newBuilder() {
    return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder();
  }

  /**
   * Creates a new FitnessHash RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FitnessHash RecordBuilder
   */
  public static za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder newBuilder(za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder other) {
    if (other == null) {
      return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder();
    } else {
      return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder(other);
    }
  }

  /**
   * Creates a new FitnessHash RecordBuilder by copying an existing FitnessHash instance.
   * @param other The existing instance to copy.
   * @return A new FitnessHash RecordBuilder
   */
  public static za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder newBuilder(za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash other) {
    if (other == null) {
      return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder();
    } else {
      return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder(other);
    }
  }

  /**
   * RecordBuilder for FitnessHash instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FitnessHash>
    implements org.apache.avro.data.RecordBuilder<FitnessHash> {

    /** The simulated user who sent the fitness data */
    private java.lang.CharSequence userid;
    /** The simulated tenant id */
    private int tenant_id;
    /** The hash value generated from a fitness event */
    private java.lang.CharSequence MY_FRAUD_KEY;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userid)) {
        this.userid = data().deepCopy(fields()[0].schema(), other.userid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.tenant_id)) {
        this.tenant_id = data().deepCopy(fields()[1].schema(), other.tenant_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.MY_FRAUD_KEY)) {
        this.MY_FRAUD_KEY = data().deepCopy(fields()[2].schema(), other.MY_FRAUD_KEY);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing FitnessHash instance
     * @param other The existing instance to copy.
     */
    private Builder(za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.userid)) {
        this.userid = data().deepCopy(fields()[0].schema(), other.userid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tenant_id)) {
        this.tenant_id = data().deepCopy(fields()[1].schema(), other.tenant_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MY_FRAUD_KEY)) {
        this.MY_FRAUD_KEY = data().deepCopy(fields()[2].schema(), other.MY_FRAUD_KEY);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'userid' field.
      * The simulated user who sent the fitness data
      * @return The value.
      */
    public java.lang.CharSequence getUserid() {
      return userid;
    }


    /**
      * Sets the value of the 'userid' field.
      * The simulated user who sent the fitness data
      * @param value The value of 'userid'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder setUserid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.userid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userid' field has been set.
      * The simulated user who sent the fitness data
      * @return True if the 'userid' field has been set, false otherwise.
      */
    public boolean hasUserid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userid' field.
      * The simulated user who sent the fitness data
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder clearUserid() {
      userid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenant_id' field.
      * The simulated tenant id
      * @return The value.
      */
    public int getTenantId() {
      return tenant_id;
    }


    /**
      * Sets the value of the 'tenant_id' field.
      * The simulated tenant id
      * @param value The value of 'tenant_id'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder setTenantId(int value) {
      validate(fields()[1], value);
      this.tenant_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tenant_id' field has been set.
      * The simulated tenant id
      * @return True if the 'tenant_id' field has been set, false otherwise.
      */
    public boolean hasTenantId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tenant_id' field.
      * The simulated tenant id
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder clearTenantId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'MY_FRAUD_KEY' field.
      * The hash value generated from a fitness event
      * @return The value.
      */
    public java.lang.CharSequence getMYFRAUDKEY() {
      return MY_FRAUD_KEY;
    }


    /**
      * Sets the value of the 'MY_FRAUD_KEY' field.
      * The hash value generated from a fitness event
      * @param value The value of 'MY_FRAUD_KEY'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder setMYFRAUDKEY(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.MY_FRAUD_KEY = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'MY_FRAUD_KEY' field has been set.
      * The hash value generated from a fitness event
      * @return True if the 'MY_FRAUD_KEY' field has been set, false otherwise.
      */
    public boolean hasMYFRAUDKEY() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'MY_FRAUD_KEY' field.
      * The hash value generated from a fitness event
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessHash.Builder clearMYFRAUDKEY() {
      MY_FRAUD_KEY = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FitnessHash build() {
      try {
        FitnessHash record = new FitnessHash();
        record.userid = fieldSetFlags()[0] ? this.userid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tenant_id = fieldSetFlags()[1] ? this.tenant_id : (java.lang.Integer) defaultValue(fields()[1]);
        record.MY_FRAUD_KEY = fieldSetFlags()[2] ? this.MY_FRAUD_KEY : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FitnessHash>
    WRITER$ = (org.apache.avro.io.DatumWriter<FitnessHash>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FitnessHash>
    READER$ = (org.apache.avro.io.DatumReader<FitnessHash>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.userid);

    out.writeInt(this.tenant_id);

    out.writeString(this.MY_FRAUD_KEY);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userid = in.readString(this.userid instanceof Utf8 ? (Utf8)this.userid : null);

      this.tenant_id = in.readInt();

      this.MY_FRAUD_KEY = in.readString(this.MY_FRAUD_KEY instanceof Utf8 ? (Utf8)this.MY_FRAUD_KEY : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userid = in.readString(this.userid instanceof Utf8 ? (Utf8)this.userid : null);
          break;

        case 1:
          this.tenant_id = in.readInt();
          break;

        case 2:
          this.MY_FRAUD_KEY = in.readString(this.MY_FRAUD_KEY instanceof Utf8 ? (Utf8)this.MY_FRAUD_KEY : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










